  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-users"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-bookings"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-payments"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DriversTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-drivers"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
# AWS Infrastructure as Code (CloudFormation)

# Complete infrastructure template for JP Luxury Ride

AWSTemplateFormatVersion: "2010-09-09"
Description: "JP Luxury Ride - Complete AWS Infrastructure"

Parameters:
  Environment:
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "staging", "prod"]
    Description: "Environment name"

  DomainName:
    Type: String
    Default: "luxride.com"
    Description: "Domain name for the application"

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-redis-sg"

  # RDS Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-db-subnet-group"

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${Environment}-lux-ride-db"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.4"
      MasterUsername: luxride_admin
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${Environment}/lux-ride/db:SecretString:password}}"
      AllocatedStorage: 20
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-lux-ride-db"

  # ElastiCache Redis
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheClusterId: !Sub "${Environment}-lux-ride-redis"
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-lux-ride-redis"

  # S3 Bucket for uploads
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-lux-ride-uploads-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${S3Bucket}/*"

  # Lambda Execution Role

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${Environment}-lux-ride-api"
      Description: "JP Luxury Ride API"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AuthResource
      - BookingsResource
      - PaymentsResource
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment

  # API Resources
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: auth

  BookingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: bookings

  PaymentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: payments

  # API Gateway Methods (at least one per resource)
  AuthPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: MOCK

  BookingsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref BookingsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: MOCK

  PaymentsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PaymentsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: MOCK

  # Secrets Manager
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}/lux-ride/db"
      Description: "Database credentials for Lux Ride"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "luxride_admin"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  StripeSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}/lux-ride/stripe"
      Description: "Stripe API credentials"
      SecretString: !Sub |
        {
          "secret_key": "sk_test_your_stripe_secret_key_here",
          "webhook_secret": "whsec_your_webhook_secret_here"
        }

  # CloudWatch Log Groups
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${Environment}-lux-ride-api"
      RetentionInDays: 14

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${Environment}-VPC-ID"

  UsersTableName:
    Description: "DynamoDB Users Table Name"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${Environment}-Users-Table"

  BookingsTableName:
    Description: "DynamoDB Bookings Table Name"
    Value: !Ref BookingsTable
    Export:
      Name: !Sub "${Environment}-Bookings-Table"

  PaymentsTableName:
    Description: "DynamoDB Payments Table Name"
    Value: !Ref PaymentsTable
    Export:
      Name: !Sub "${Environment}-Payments-Table"

  DriversTableName:
    Description: "DynamoDB Drivers Table Name"
    Value: !Ref DriversTable
    Export:
      Name: !Sub "${Environment}-Drivers-Table"


  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${Environment}-S3-Bucket"

  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-API-URL"

  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${Environment}-Lambda-Role-ARN"
